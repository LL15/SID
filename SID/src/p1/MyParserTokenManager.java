/* Generated By:JavaCC: Do not edit this line. MyParserTokenManager.java */
package p1;
import java.io.*;
import java.net.*;
import java.util.*;

/** Token Manager. */
public class MyParserTokenManager implements MyParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 47:
         return jjStopAtPos(0, 21);
      case 60:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x7ffe0L);
      case 62:
         return jjStopAtPos(0, 20);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x42280L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x140L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c800L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x500L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x280L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c000L);
      case 62:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(3, 18);
         break;
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0xc80L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 97:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(4, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1c000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x2100L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x840L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 121:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(4, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(5, 6);
         else if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(5, 8);
         break;
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x20800L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1c080L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(6, 7);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(6, 9);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         break;
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1c000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x1c000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x1c000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x20L);
      case 47:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 61:
         return jjMoveStringLiteralDfa10_0(active0, 0x1c000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa11_0(active0, 0x1c000L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x30000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x20L);
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(14, 5);
         break;
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L);
      case 107:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000L);
      case 122:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000L);
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(16, 15);
         break;
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 107:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(20, 17);
         break;
      case 102:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa21_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa22_0(active0, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(22, 16);
         break;
      case 118:
         return jjMoveStringLiteralDfa23_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa25_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa26_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
static private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa27_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
static private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa28_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
static private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa29_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
static private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa30_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
static private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(30, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x940a300200000000L, 0x40e6686040a220fL
};
static final long[] jjbitVec1 = {
   0x0L, 0x2100000000080000L, 0x40000L, 0x0L
};
static final long[] jjbitVec2 = {
   0x356180000L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0x2000000000000000L
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xafff7ffe00000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(3);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0xafff7ffe00000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 3:
                  if ((0x3ffffffebfffffffL & l) == 0L)
                     break;
                  kind = 23;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec1[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, 
"\74\41\104\117\103\124\131\120\105\40\150\164\155\154\76", "\74\150\164\155\154\76", "\74\57\150\164\155\154\76", 
"\74\150\145\141\144\76", "\74\57\150\145\141\144\76", "\74\155\145\164\141", 
"\74\164\151\164\154\145\76", "\74\142\157\144\171", "\74\57\142\157\144\171\76", 
"\74\164\144\40\143\154\141\163\163\75\42\142\157\157\153\155\141\162\153\40\146\141\166\157\162\151\164\145\163\42\76", "\74\164\144\40\143\154\141\163\163\75\42\156\141\155\145\42\76", 
"\74\164\144\40\143\154\141\163\163\75\42\160\162\151\143\145\40\146\154\157\160\42\76", 
"\74\141\40\150\162\145\146\75\42\57\143\157\164\151\172\141\143\151\157\156\57", "\74\57\141\76", "\74", "\76", "\57", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[4];
static private final int[] jjstateSet = new int[8];
static protected char curChar;
/** Constructor. */
public MyParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public MyParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 4; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
