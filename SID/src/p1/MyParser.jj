/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(MyParser)package p1;

import java.io.*;
import java.net.*;
import java.util.*;

public class MyParser{
  // URL donde obtener empresas y cotizaciones "actuales"
	private final static String URL = "http://www.infobolsa.es/acciones/ibex35";
    public static void main(String args []) throws ParseException  {    try {
      	URL url = new URL(URL);
      	URLConnection urlConnection = url.openConnection();
      	BufferedReader buffer = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
      	//String cadena;
		//String fichero = "C:\\Users\\Daniel\\Documents\\Sistemas de informacion distribuidos\\pagina.html";
		//FileReader f = new FileReader(fichero);
		//BufferedReader buffer = new BufferedReader(f);
		//while((cadena = buffer.readLine())!=null) {
            //System.out.println(cadena);
        //}
        //buffer.close();
		// Entrada de datos de la web
		//InputStreamReader stream = new InputStreamReader(url);
		MyParser parser = new MyParser(buffer);
		System.out.println(parser.leeTablaCotizaciones());
		//Hashtable<String, Double> tablaCotizaciones = parser.leeTablaCotizaciones();
	      
	    System.out.print("\n\nIntroduzca el nombre de una empresa del IBEX 35: ");
	    //Scanner scanner = new Scanner(System.in);
	    //String empresa = scanner.nextLine(); 
	    //double valorActual = tablaCotizaciones.get(empresa);
	    //System.out.println("Cotización actual: " + valorActual);
    }catch(Exception e) {
		System.out.println("Exception " + e.getMessage());
    }  }}PARSER_END(MyParser)SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < CABECERA : "<!DOCTYPE html>" >
	| < HTML : "<html>" >
	| < HTML_FIN : "</html>" >
	| < HEAD : "<head>" >
	| < HEAD_FIN : "</head>" >
	| < META : "<meta" >
	| < TITLE : "<title>" >
	| < BODY : "<body" >
	| < BODY_FIN : "</body>" >
	| < INICIO_TABLA: "<td class=\"bookmark favorites\">" >
	| < NOMBRE_EMPRESA :  "<td class=\"name\">" >
	| < COTIZACION_EMPRESA : "<td class=\"price flop\">" >
	| < A_HREF : "<a href=\"/cotizacion/" > //Se deberia poner el nombre de la empresa
											//introducida por el usuario
	| < A_FIN : "</a>" >
	| < ETIQUETA : "<" >
	| < ETIQUETA_FIN : ">" >
	| < BARRA : "/" >
	| < NUMERO: (["0"-"9"])+(","["0"-"9"])+ >
	| < CARACTERES :([ "A"-"Z", "a"-"z", "‡", "Ž", "’", "—", "œ", "–", "ç",
	"ƒ", "ê","î", "ò", "„", "Ÿ", "†", "0"-"9", ".", "Á", "!", "À", "?", ":", ";", ",",
	"'","¼", "=", "\"", "-", "_", "+", "*", "(", ")", "\\", "@", "%", "#", "&",
	"[", "]","|", "{", "}", "$", "€", "á", "é", "í", "ó", "ú", "Á", "É", "Í", "Ó", "Ú",
	"ñ", "Ñ", "¿", "?", "º", "\u00c3", "\u00ad", "\u00b3", "\u201c", "\ufffd", "\u00e2",
	"\u201a", "\u00ac", "\u00a1", "\u00b1", "\u00c2" ])+ >

}

Hashtable<String, Double> leeTablaCotizaciones() : {
  Hashtable<String, Double> tablaLectura = new Hashtable<String, Double> (); } {
    <CABECERA> <HTML> <HEAD> saltar() <HEAD_FIN> tablaLectura = body() <HTML_FIN> {
      return tablaLectura; }
    }

void saltar() : {} {
  (<CARACTERES> | <META> | <TITLE> | <ETIQUETA> | <A_FIN> | <ETIQUETA_FIN> | <BARRA> | <NUMERO>)+
}

Hashtable<String, Double> body() : {
  Hashtable<String, Double> tablaBody = new Hashtable<String, Double> ();
} {
  <BODY> saltar()  tablaBody = cotizaciones()  <BODY_FIN> {
    return tablaBody; }
  }

Hashtable<String, Double> cotizaciones(): {
  Hashtable<String, Double> tablaC= new Hashtable<String, Double> ();
  String nombre = " ";
  String cotizacion;
  System.out.println("cotizaciones()");
  
} {
  <INICIO_TABLA> {System.out.println("1"); }<NOMBRE_EMPRESA>{System.out.println("2"); }<A_HREF><CARACTERES><ETIQUETA_FIN> nombre=cadena() <A_FIN> saltar() <COTIZACION_EMPRESA> cotizacion=number() {
    return tablaC; }
  }

String number() :
{Token t ;}
{
  t= < NUMERO >
  { return t.image; }
}

String cadena() :
{ Token s ;
System.out.println("cadena()");}
{
  s= < CARACTERES >
  { return s.image; }
}
